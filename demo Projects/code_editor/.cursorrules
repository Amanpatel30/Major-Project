# Code Editor Project

Every time you choose to apply a rule(s), explicitly state the rule(s) in the output. You can abbreviate the rule description to a single word or phrase.

## Project Context
- A modern, web-based code editor with AI capabilities
- Real-time collaboration features
- Syntax highlighting and intelligent code completion
- AI-powered code suggestions and explanations
- Multiple language support

## Code Style and Structure
- Write concise, technical TypeScript code with accurate examples
- Use functional and declarative programming patterns; avoid classes
- Prefer composition over inheritance
- Use descriptive variable names that reflect editor states (e.g., isEditing, hasUnsavedChanges)
- Structure repository files as follows:
```
src/
├── components/         # React components
    ├── editor/        # Editor-specific components
    ├── sidebar/       # Sidebar components
    ├── toolbar/       # Toolbar components
    └── shared/        # Shared components
├── hooks/             # Custom React hooks
├── utils/             # Helper functions
    ├── parser/        # Code parsing utilities
    ├── formatter/     # Code formatting utilities
    └── ai/           # AI-related utilities
├── types/             # TypeScript types
├── lib/              # Third-party integrations
    ├── monaco/       # Monaco editor setup
    ├── ai/           # AI service integrations
    └── collab/       # Collaboration features
└── services/         # Core services
    ├── language/     # Language services
    ├── workspace/    # Workspace management
    └── sync/        # Sync services
```

## Tech Stack
- React
- TypeScript
- Monaco Editor
- Tailwind CSS
- Shadcn UI
- WebSocket (for collaboration)
- AI Integration (OpenAI/Claude)

## Naming Conventions
- Use lowercase with dashes for directories (e.g., components/code-panel)
- Use PascalCase for component files (e.g., CodeEditor.tsx)
- Use camelCase for utility files (e.g., syntaxHighlighter.ts)
- Prefix AI-related components with 'AI' (e.g., AICompletionPanel)

## TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types
- Define strict types for editor states and events
- Use discriminated unions for different types of editor commands
- Define explicit interfaces for language services
- Use absolute imports with @/ prefix
- Define proper types for Monaco editor interactions

## Editor Specific
- Implement proper Monaco editor configuration
- Handle different file types and languages appropriately
- Implement proper undo/redo stack
- Handle large files efficiently
- Proper memory management for editor instances
```typescript
interface EditorState {
  content: string;
  language: string;
  cursor: Position;
  selections: Selection[];
}
```

## State Management
- Use React Context for global editor state
- Implement proper state persistence for user preferences
- Handle editor session state properly
- Implement proper cleanup for editor instances

## Syntax and Formatting
- Use consistent code formatting across the project
- Implement proper syntax highlighting
- Support multiple language modes
- Handle indentation properly

## UI and Styling
- Use Shadcn UI for consistent component design
- Implement proper editor themes
- Consider accessibility in editor design
- Support both light and dark modes
- Implement proper loading states for AI features

## Error Handling
- Implement proper error boundaries for editor crashes
- Handle syntax errors gracefully
- Provide meaningful error messages
- Log errors appropriately for debugging
- Handle network failures in collaborative features

## Testing
- Write unit tests for core editor functions
- Test syntax highlighting for different languages
- Test collaborative features
- Test AI integration thoroughly
- Performance testing for large files

## Security
- Sanitize code input/output
- Implement proper CORS handling
- Secure collaborative features
- Handle sensitive data properly
- Validate AI responses

## Git Usage
Commit Message Prefixes:
- "editor:" for editor core changes
- "ai:" for AI-related changes
- "collab:" for collaboration features
- "lang:" for language support changes
- "ui:" for interface changes
- "perf:" for performance improvements
- "fix:" for bug fixes
- "test:" for testing improvements

## Documentation
- Document editor API and configurations
- Maintain clear setup instructions
- Document supported languages
- Document AI integration setup
- Keep API documentation up-to-date

## Development Workflow
- Regular testing with different file types
- Performance profiling
- Cross-browser testing
- Regular security audits
- Version control for editor configurations

- "feat:" for new features
- "perf:" for performance improvements
- "docs:" for documentation changes
- "style:" for formatting changes
- "refactor:" for code refactoring
- "test:" for adding missing tests
- "chore:" for maintenance tasks

Rules:
- Use lowercase for commit messages
- Keep the summary line concise
- Include description for non-obvious changes
- Reference issue numbers when applicable

## Documentation
- Maintain clear README with setup instructions
- Document API interactions and data flows
- Keep manifest.json well-documented
- Don't include comments unless it's for complex logic
- Document permission requirements

## Development Workflow
- Use proper version control
- Implement proper code review process
- Test in multiple environments
- Follow semantic versioning for releases
- Maintain changelog
